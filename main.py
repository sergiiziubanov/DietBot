from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters,
    PicklePersistence, CallbackQueryHandler, JobQueue
)
import datetime
import json
import os
import matplotlib.pyplot as plt
import io
import random
from collections import defaultdict

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
WEIGHT_LOG_FILE = "weight_log.json"
USER_PROFILES_FILE = "user_profiles.json"
PERSISTENCE_FILE = "my_bot_data.pkl"
user_profiles_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(SETUP_STATE_NONE, SETUP_STATE_GENDER, SETUP_STATE_AGE, SETUP_STATE_HEIGHT,
 SETUP_STATE_WEIGHT_INITIAL, SETUP_STATE_ACTIVITY, SETUP_STATE_DIET_GOAL,
 SETUP_STATE_LOGGING_FOOD_AWAITING_INPUT, SETUP_STATE_ADDING_PREFERENCE,
 SETUP_STATE_ADDING_EXCLUSION, SETUP_STATE_AWAITING_FRIDGE_INGREDIENTS) = range(11)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def load_json_data(filepath, default_value=None):
    if default_value is None: default_value = {}
    if not os.path.exists(filepath): return default_value
    try:
        with open(filepath, "r", encoding="utf-8") as f: return json.load(f)
    except (json.JSONDecodeError, Exception) as e:
        print(f"Error reading {filepath}: {e}"); return default_value

def save_weight(chat_id, weight):
    data = load_json_data(WEIGHT_LOG_FILE)
    today = datetime.date.today().isoformat()
    data.setdefault(str(chat_id), {})[today] = weight
    with open(WEIGHT_LOG_FILE, "w", encoding="utf-8") as f: json.dump(data, f, indent=4)

def get_latest_weight(chat_id):
    data = load_json_data(WEIGHT_LOG_FILE)
    user_weights = data.get(str(chat_id), {})
    if user_weights: return user_weights[sorted(user_weights.keys())[-1]]
    return None

async def calculate_target_calories_and_pfc(user_id):
    user_profile = user_profiles_data.get(str(user_id))
    latest_weight = get_latest_weight(str(user_id))
    if not all([user_profile, latest_weight]): return None, None, None, None
    gender, age, height, activity = user_profile.get('gender'), user_profile.get('age'), user_profile.get('height'), user_profile.get('activity')
    diet_goal = user_profile.get('diet_goal', '–±–∞–ª–∞–Ω—Å')
    if gender == '–º—É–∂—Å–∫–æ–π': bmr = (10 * latest_weight) + (6.25 * height) - (5 * age) + 5
    else: bmr = (10 * latest_weight) + (6.25 * height) - (5 * age) - 161
    activity_factors = [1.2, 1.375, 1.55, 1.725, 1.9]
    maintenance_calories = int(bmr * activity_factors[activity - 1])
    target_calories = int(maintenance_calories * 0.8)
    if diet_goal == '–±–µ–ª–æ–∫': protein, fat, carbs = int((target_calories * 0.30) / 4), int((target_calories * 0.30) / 9), int((target_calories * 0.40) / 4)
    elif diet_goal == '–Ω–∏–∑–∫–æ—É–≥–ª': protein, fat, carbs = int((target_calories * 0.25) / 4), int((target_calories * 0.50) / 9), int((target_calories * 0.25) / 4)
    else: protein, fat, carbs = int((target_calories * 0.20) / 4), int((target_calories * 0.30) / 9), int((target_calories * 0.50) / 4)
    return target_calories, protein, fat, carbs

def create_pfc_pie_chart(pfc_data):
    labels = ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã']
    sizes = [pfc_data.get('protein', 0), pfc_data.get('fat', 0), pfc_data.get('carbs', 0)]
    if sum(sizes) == 0: sizes = [1, 1, 1]
    colors = ['#ff9999','#66b3ff','#99ff99']
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
    ax.axis('equal'); plt.title(f"–ë–∞–ª–∞–Ω—Å –ë–ñ–£ (–≤ –≥—Ä–∞–º–º–∞—Ö)\n–ë: {sizes[0]}–≥, –ñ: {sizes[1]}–≥, –£: {sizes[2]}–≥")
    buf = io.BytesIO(); plt.savefig(buf, format='png'); buf.seek(0); plt.close()
    return buf

async def generate_personalized_menu_with_llm(user_profile, calorie_target, pfc_targets, num_days=1, meal_to_replace=None):
    SAMPLE_BREAKFASTS = [{"meal_name": "–ó–∞–≤—Ç—Ä–∞–∫ (–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏)", "items": [{"food_item": "–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è", "grams": 50}, {"food_item": "—è–≥–æ–¥—ã", "grams": 100}], "total_calories": 350, "total_protein": 15, "total_fat": 8, "total_carbs": 55, "recipe": "–ó–∞–ª–∏—Ç—å –æ–≤—Å—è–Ω–∫—É –∫–∏–ø—è—Ç–∫–æ–º/–º–æ–ª–æ–∫–æ–º, –¥–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã, –¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5 –º–∏–Ω—É—Ç."}]
    SAMPLE_LUNCHES = [{"meal_name": "–û–±–µ–¥ (–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π)", "items": [{"food_item": "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "grams": 150}, {"food_item": "–≥—Ä–µ—á–∫–∞", "grams": 60}], "total_calories": 550, "total_protein": 45, "total_fat": 10, "total_carbs": 60, "recipe": "–û—Ç–≤–∞—Ä–∏—Ç—å –≥—Ä–µ—á–∫—É. –ì—Ä—É–¥–∫—É –∑–∞–ø–µ—á—å –≤ —Å–ø–µ—Ü–∏—è—Ö –∏–ª–∏ –æ–±–∂–∞—Ä–∏—Ç—å –Ω–∞ –≥—Ä–∏–ª–µ."}]
    SAMPLE_DINNERS = [{"meal_name": "–£–∂–∏–Ω (–¢–≤–æ—Ä–æ–≥ —Å –æ—Ä–µ—Ö–∞–º–∏)", "items": [{"food_item": "—Ç–≤–æ—Ä–æ–≥", "grams": 180}, {"food_item": "–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", "grams": 20}], "total_calories": 300, "total_protein": 30, "total_fat": 18, "total_carbs": 8, "recipe": "–°–º–µ—à–∞—Ç—å —Ç–≤–æ—Ä–æ–≥ —Å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–º–∏ –æ—Ä–µ—Ö–∞–º–∏."}]
    if meal_to_replace:
        original_name = meal_to_replace.get('meal_name', '').lower()
        if '–∑–∞–≤—Ç—Ä–∞–∫' in original_name: return random.choice(SAMPLE_BREAKFASTS)
        elif '–æ–±–µ–¥' in original_name: return random.choice(SAMPLE_LUNCHES)
        else: return random.choice(SAMPLE_DINNERS)
    else:
        weekly_plan = []; consolidated_list = defaultdict(int)
        for i in range(num_days):
            day_meals = [random.choice(SAMPLE_BREAKFASTS), random.choice(SAMPLE_LUNCHES), random.choice(SAMPLE_DINNERS)]
            for meal in day_meals:
                for item in meal.get('items', []): consolidated_list[item['food_item']] += item['grams']
            day_menu = {"day_name": f"–î–µ–Ω—å {i+1}", "meals": day_meals}
            weekly_plan.append(day_menu)
        shopping_list_formatted = [f"{name}: {grams}–≥" for name, grams in consolidated_list.items()]
        return {"weekly_plan": weekly_plan, "shopping_list": shopping_list_formatted}

async def calculate_calories_from_food_list_llm(user_id, food_list_items):
    food_list_str = "; ".join(food_list_items); print(f"LLM STUB: Calculating PFC for '{food_list_str}'")
    return {"calories": 300, "protein": 30, "fat": 15, "carbs": 10}

async def generate_recipe_from_ingredients(user_id, ingredients_text):
    print(f"LLM STUB: Generating recipe from: {ingredients_text}")
    return {"dish_name": "–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º", "description": "–ü—Ä–æ—Å—Ç–æ–µ –∏ —Å—ã—Ç–Ω–æ–µ –±–ª—é–¥–æ, –±–æ–≥–∞—Ç–æ–µ –±–µ–ª–∫–æ–º.", "ingredients_used": ["–ö—É—Ä–∏—Ü–∞", "–†–∏—Å"], "recipe_steps": ["1. –û—Ç–≤–∞—Ä–∏—Ç–µ —Ä–∏—Å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.", "2. –ù–∞—Ç—Ä–∏—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É —Å–ø–µ—Ü–∏—è–º–∏.", "3. –ó–∞–ø–µ–∫–∞–π—Ç–µ –≤ –¥—É—Ö–æ–≤–∫–µ –ø—Ä–∏ 180¬∞C –≤ —Ç–µ—á–µ–Ω–∏–µ 20-25 –º–∏–Ω—É—Ç.", "4. –ü–æ–¥–∞–≤–∞–π—Ç–µ –∫—É—Ä–∏—Ü—É —Å —Ä–∏—Å–æ–º."]}


### –ù–û–í–´–ô –ö–û–î: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ###
async def schedule_reminders_for_user(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç."""
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    water_job_name = f"drink_water_{chat_id}"
    weigh_job_name = f"weigh_in_{chat_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ
    if not context.job_queue.get_jobs_by_name(water_job_name):
        context.job_queue.run_repeating(send_water_reminder, interval=7200, chat_id=chat_id, name=water_job_name)
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ –¥–ª—è {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏
    if not context.job_queue.get_jobs_by_name(weigh_job_name):
        context.job_queue.run_daily(check_and_send_weigh_in_reminder, time=datetime.time(hour=20, minute=0), chat_id=chat_id, name=weigh_job_name)
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏ –¥–ª—è {chat_id}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    if chat_id_str not in user_profiles_data:
        context.user_data['setup_step'] = SETUP_STATE_GENDER
        keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]; reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=MAIN_REPLY_MARKUP)
        # ### –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ###
        await schedule_reminders_for_user(chat_id, context)


async def calculate_and_send_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id); user_profile = user_profiles_data.get(user_id)
    if not user_profile: await update.message.reply_text("‚ùó –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start."); return
    targets = await calculate_target_calories_and_pfc(user_id)
    if not targets[0]: await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –≤–µ—Å –∑–∞–ø–∏—Å–∞–Ω."); return
    latest_weight = get_latest_weight(user_id)
    await update.message.reply_text(f"üìä *–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:*\n–ü–æ–ª: {user_profile.get('gender').capitalize()}, –í–æ–∑—Ä–∞—Å—Ç: {user_profile.get('age')}, –†–æ—Å—Ç: {user_profile.get('height')} —Å–º\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_profile.get('activity')}, –¶–µ–ª—å: {user_profile.get('diet_goal', '–±–∞–ª–∞–Ω—Å')}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: *{latest_weight}* –∫–≥.\n\n‚úÖ *–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è —Ü–µ–ª—å –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:*\n–ö–∞–ª–æ—Ä–∏–∏: *{targets[0]}* –∫–∫–∞–ª, –ë–µ–ª–∫–∏: *{targets[1]}* –≥, –ñ–∏—Ä—ã: *{targets[2]}* –≥, –£–≥–ª–µ–≤–æ–¥—ã: *{targets[3]}* –≥", parse_mode='Markdown')

async def calories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await calculate_and_send_calories(update, context)

async def log_food_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['setup_step'] = SETUP_STATE_LOGGING_FOOD_AWAITING_INPUT
    context.user_data['current_food_log_session_items'] = []
    reply_markup = ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True)
    await update.message.reply_text("üçΩÔ∏è –í–≤–æ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=reply_markup)

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id); data = load_json_data(WEIGHT_LOG_FILE)
    if chat_id not in data or not data[chat_id]: await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–µ—Å."); return
    log = data[chat_id]; sorted_log = sorted(log.items(), key=lambda x: x[0])
    text = "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞ –ø–æ –¥–Ω—è–º:\n"; dates = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d, w in sorted_log]; weights = [w for d, w in sorted_log]
    for date_obj, weight in zip(dates, weights): text += f"‚ñ´Ô∏è {date_obj.strftime('%d.%m.%Y')}: {weight} –∫–≥\n"
    await update.message.reply_text(text)
    if len(dates) < 2: return
    plt.figure(figsize=(10, 6)); plt.plot(dates, weights, marker='o', linestyle='-'); plt.title("–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞", fontsize=16); plt.xlabel("–î–∞—Ç–∞"); plt.ylabel("–í–µ—Å (–∫–≥)"); plt.grid(True); plt.gcf().autofmt_xdate();
    buf = io.BytesIO(); plt.savefig(buf, format='png', bbox_inches='tight'); buf.seek(0); plt.close()
    await update.message.reply_photo(buf)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generate_and_send_menu(update, context, num_days=1)

async def weekly_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞ 3 –¥–Ω—è", callback_data="gen_menu:3"), InlineKeyboardButton("–ù–∞ 5 –¥–Ω–µ–π", callback_data="gen_menu:5"), InlineKeyboardButton("–ù–∞ 7 –¥–Ω–µ–π", callback_data="gen_menu:7")]])
    await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é?", reply_markup=keyboard)

async def generate_and_send_menu(update_or_query: Update | CallbackQueryHandler, context: ContextTypes.DEFAULT_TYPE, num_days: int):
    chat_id = update_or_query.effective_chat.id
    user_id = update_or_query.effective_user.id

    targets = await calculate_target_calories_and_pfc(user_id)
    if not targets[0]:
        await context.bot.send_message(chat_id=chat_id, text="‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å (/start) –∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å.")
        return

    await context.bot.send_message(chat_id=chat_id, text=f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ {num_days} {'–¥–µ–Ω—å' if num_days == 1 else '–¥–Ω—è'}...")

    user_profile = user_profiles_data.get(str(user_id), {})
    pfc_targets = {'p': targets[1], 'f': targets[2], 'c': targets[3]}
    menu_data = await generate_personalized_menu_with_llm(user_profile, targets[0], pfc_targets, num_days=num_days)

    if not menu_data or not menu_data.get('weekly_plan'):
        await context.bot.send_message(chat_id=chat_id, text="‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é.")
        return

    context.user_data['last_weekly_menu'] = menu_data
    for day_index, day_menu in enumerate(menu_data['weekly_plan']):
        total_cals = sum(m.get('total_calories', 0) for m in day_menu['meals'])
        total_p = sum(m.get('total_protein', 0) for m in day_menu['meals'])
        total_f = sum(m.get('total_fat', 0) for m in day_menu['meals'])
        total_c = sum(m.get('total_carbs', 0) for m in day_menu['meals'])
        await context.bot.send_message(chat_id=chat_id, text=f"üçΩÔ∏è *{day_menu.get('day_name', '–í–∞—à–µ –º–µ–Ω—é')}*\n–ò—Ç–æ–≥: *–ö ~{total_cals} | –ë {total_p}–≥ | –ñ {total_f}–≥ | –£ {total_c}–≥*", parse_mode='Markdown')
        for meal_index, meal in enumerate(day_menu['meals']):
            response_text = f"*{meal.get('meal_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')}*\n–ö–ë–ñ–£: *{meal.get('total_calories', 0)} | {meal.get('total_protein', 0)} | {meal.get('total_fat', 0)} | {meal.get('total_carbs', 0)}*"
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace:{day_index}:{meal_index}"), InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç", callback_data=f"recipe:{day_index}:{meal_index}")]])
            await context.bot.send_message(chat_id=chat_id, text=response_text, reply_markup=keyboard, parse_mode='Markdown')

    if menu_data.get('shopping_list'):
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data="show_shopping_list")]])
        await context.bot.send_message(chat_id=chat_id, text="–ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?", reply_markup=keyboard)

async def prefs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id); profile = user_profiles_data.get(user_id, {})
    prefs = ", ".join(profile.get('preferences', [])) or "–ø–æ–∫–∞ –Ω–µ—Ç"; excls = ", ".join(profile.get('exclusions', [])) or "–ø–æ–∫–∞ –Ω–µ—Ç"
    text = f"‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏*\n\nüëç *–õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã*: {prefs}\nüëé *–ù–µ–ª—é–±–∏–º—ã–µ*: {excls}"
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üëç –î–æ–±–∞–≤–∏—Ç—å –ª—é–±–∏–º—ã–π", callback_data="prefs:add_pref"), InlineKeyboardButton("üëé –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—é–±–∏–º—ã–π", callback_data="prefs:add_excl")], [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–∫–∏", callback_data="prefs:clear_all")]])
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def fridge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['setup_step'] = SETUP_STATE_AWAITING_FRIDGE_INGREDIENTS
    await update.message.reply_text("üßä –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–∑ –Ω–∏—Ö –±–ª—é–¥–æ.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def inline_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    data = query.data
    if data.startswith("gen_menu:"):
        num_days = int(data.split(':')[1]); await query.edit_message_text(f"–ü—Ä–∏–Ω—è—Ç–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ {num_days} –¥–Ω–µ–π...")
        await generate_and_send_menu(query, context, num_days); return
    if data == "show_shopping_list":
        menu_data = context.user_data.get('last_weekly_menu')
        if not menu_data or not menu_data.get('shopping_list'): await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫."); return
        shopping_list = menu_data.get('shopping_list', [])
        shopping_list_text = "üõí *–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*\n\n" + "\n".join(f"‚Ä¢ {item}" for item in shopping_list)
        await query.edit_message_text(text=shopping_list_text, parse_mode='Markdown'); return
    if data.startswith("prefs:"):
        action = data.split(':')[1]; user_id = str(query.from_user.id)
        if action == "add_pref":
            context.user_data['setup_step'] = SETUP_STATE_ADDING_PREFERENCE; await query.message.reply_text("–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–∏–º—ã–µ?")
        elif action == "add_excl":
            context.user_data['setup_step'] = SETUP_STATE_ADDING_EXCLUSION; await query.message.reply_text("–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–ª—é–±–∏–º—ã–µ?")
        elif action == "clear_all":
            user_profiles_data[user_id]['preferences'] = []; user_profiles_data[user_id]['exclusions'] = []
            with open(USER_PROFILES_FILE, "w", encoding="utf-8") as f: json.dump(user_profiles_data, f, indent=4)
            await query.message.reply_text("‚úÖ –í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –æ—á–∏—â–µ–Ω—ã.")
        await query.edit_message_text(text=query.message.text); return
    if data.startswith("recipe:") or data.startswith("replace:"):
        try: action, day_index_str, meal_index_str = data.split(':'); day_index, meal_index = int(day_index_str), int(meal_index_str)
        except ValueError: await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."); return
        menu_data = context.user_data.get('last_weekly_menu')
        if not menu_data or day_index >= len(menu_data['weekly_plan']) or meal_index >= len(menu_data['weekly_plan'][day_index]['meals']):
            await query.edit_message_text("–ú–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ."); return
        meal = menu_data['weekly_plan'][day_index]['meals'][meal_index]
        if action == 'recipe':
            recipe_text = meal.get('recipe', '–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"üìñ *–†–µ—Ü–µ–ø—Ç –¥–ª—è \"{meal.get('meal_name')}\"*: \n\n{recipe_text}", parse_mode='Markdown')
        elif action == 'replace':
            await query.edit_message_text(f"üîÑ –ò—â—É –∑–∞–º–µ–Ω—É –¥–ª—è *{meal['meal_name']}*...", parse_mode='Markdown')
            user_profile = user_profiles_data.get(str(query.from_user.id), {})
            replacement_meal = await generate_personalized_menu_with_llm(user_profile, None, None, meal_to_replace=meal)
            if not replacement_meal: await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ–Ω—É –¥–ª—è *{meal['meal_name']}*.", parse_mode='Markdown'); return
            context.user_data['last_weekly_menu']['weekly_plan'][day_index]['meals'][meal_index] = replacement_meal
            original_meal_type = meal.get('meal_name').split('(')[0].strip()
            new_meal_name_only = replacement_meal.get('meal_name', '–ë–ª—é–¥–æ').replace(original_meal_type, "").strip()
            new_text = f"{original_meal_type}: *{new_meal_name_only}*\n–ö–ë–ñ–£: *{replacement_meal.get('total_calories',0)} | {replacement_meal.get('total_protein',0)} | {replacement_meal.get('total_fat',0)} | {replacement_meal.get('total_carbs',0)}*"
            new_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace:{day_index}:{meal_index}"), InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç", callback_data=f"recipe:{day_index}:{meal_index}")]])
            await query.edit_message_text(text=new_text, reply_markup=new_keyboard, parse_mode='Markdown')

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    handler = MAIN_MENU_HANDLERS.get(text)
    if handler:
        await handler(update, context)
        return

    chat_id = update.effective_chat.id
    chat_id_str = str(chat_id)
    user_id = str(update.effective_user.id)
    current_setup_step = context.user_data.get('setup_step')

    if text.lower().startswith("–≤–µ—Å"):
        try: weight_value = float(text[3:].strip().replace(',', '.')); save_weight(chat_id_str, weight_value); await update.message.reply_text(f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {weight_value} –∫–≥")
        except (ValueError, IndexError): await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –í–µ—Å 80.5")
        return

    if current_setup_step is not None and current_setup_step != SETUP_STATE_LOGGING_FOOD_AWAITING_INPUT:
        if current_setup_step == SETUP_STATE_GENDER:
            if text.lower() in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']: context.user_data['profile_gender'] = text.lower(); context.user_data['setup_step'] = SETUP_STATE_AGE; await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
            else: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        elif current_setup_step == SETUP_STATE_AGE:
            try:
                age = int(text)
                if 10 <= age <= 120: context.user_data['profile_age'] = age; context.user_data['setup_step'] = SETUP_STATE_HEIGHT; await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–º?")
                else: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 120).")
            except ValueError: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        elif current_setup_step == SETUP_STATE_HEIGHT:
            try:
                height = int(text)
                if 50 <= height <= 250: context.user_data['profile_height'] = height; context.user_data['setup_step'] = SETUP_STATE_WEIGHT_INITIAL; await update.message.reply_text("–ö–∞–∫–æ–π –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥?")
                else: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 50 –¥–æ 250 —Å–º).")
            except ValueError: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")
        elif current_setup_step == SETUP_STATE_WEIGHT_INITIAL:
            try:
                weight = float(text.replace(',', '.'));
                if 20 <= weight <= 300: save_weight(chat_id_str, weight); context.user_data['setup_step'] = SETUP_STATE_ACTIVITY; await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5)")
                else: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 20 –¥–æ 300 –∫–≥).")
            except ValueError: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).")
        elif current_setup_step == SETUP_STATE_ACTIVITY:
            try:
                activity = int(text)
                if 1 <= activity <= 5:
                    context.user_data['profile_activity'] = activity; context.user_data['setup_step'] = SETUP_STATE_DIET_GOAL
                    keyboard = [["–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Ö—É–¥–µ–Ω–∏–µ"], ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –º—ã—à—Ü—ã"], ["–ê–∫—Ç–∏–≤–Ω–æ–µ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ (–ù–∏–∑–∫–æ—É–≥–ª.)"]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥...", reply_markup=reply_markup, parse_mode='Markdown')
                else: await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            except ValueError: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∏—Å–ª–æ–º.")
        elif current_setup_step == SETUP_STATE_DIET_GOAL:
            goal_map = {"—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Ö—É–¥–µ–Ω–∏–µ": "–±–∞–ª–∞–Ω—Å", "–ø–æ—Ö—É–¥–µ–Ω–∏–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –º—ã—à—Ü—ã": "–±–µ–ª–æ–∫", "–∞–∫—Ç–∏–≤–Ω–æ–µ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ (–Ω–∏–∑–∫–æ—É–≥–ª.)": "–Ω–∏–∑–∫–æ—É–≥–ª"}
            diet_goal = goal_map.get(text.lower())
            if diet_goal:
                user_profiles_data[chat_id_str] = {'gender': context.user_data.get('profile_gender'), 'age': context.user_data.get('profile_age'), 'height': context.user_data.get('profile_height'), 'activity': context.user_data.get('profile_activity'), 'diet_goal': diet_goal, 'preferences': [], 'exclusions': []}
                with open(USER_PROFILES_FILE, "w", encoding="utf-8") as f: json.dump(user_profiles_data, f, indent=4)
                for key in list(context.user_data.keys()):
                    if key.startswith('profile_') or key == 'setup_step': context.user_data.pop(key, None)
                
                await update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                # ### –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ###
                await schedule_reminders_for_user(chat_id, context)
                await calculate_and_send_calories(update, context)
                await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=MAIN_REPLY_MARKUP)
            else: await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å handle_text_messages –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


### –ù–û–í–´–ô –ö–û–î: –§—É–Ω–∫—Ü–∏–∏-–∫–æ–ª–±—ç–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ###
async def send_water_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ."""
    job = context.job
    await context.bot.send_message(job.chat_id, text="üíß –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã!")

async def check_and_send_weigh_in_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∑–≤–µ—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è, –∏ –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç."""
    job = context.job
    chat_id_str = str(job.chat_id)
    today_iso = datetime.date.today().isoformat()
    
    weight_data = load_json_data(WEIGHT_LOG_FILE)
    user_weight_log = weight_data.get(chat_id_str, {})
    
    if today_iso not in user_weight_log:
        await context.bot.send_message(job.chat_id, text="‚öñÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞—é: —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –≤–∑–≤–µ—Å–∏—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–µ—Å! (–ü—Ä–∏–º–µ—Ä: `–≤–µ—Å 80.5`)")


# --- –ï–î–ò–ù–´–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–õ–Ø –ú–ï–ù–Æ ---
MAIN_MENU_HANDLERS = {
    "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å": menu_command,
    "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é": weekly_menu_command,
    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£": calories_command,
    "–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞": progress_command,
    "–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É": log_food_command,
    "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è": prefs_command,
    "–ß—Ç–æ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?": fridge_command,
}

main_keyboard_layout = [
    ["–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
    ["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£", "–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞"],
    ["–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É"],
    ["–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", "–ß—Ç–æ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?"]
]
MAIN_REPLY_MARKUP = ReplyKeyboardMarkup(main_keyboard_layout, resize_keyboard=True)

# ===== –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø MAIN =====
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –∏ –≤–∫–ª—é—á–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á."""
    global user_profiles_data
    user_profiles_data = load_json_data(USER_PROFILES_FILE)
    
    persistence = PicklePersistence(filepath=PERSISTENCE_FILE)
    job_queue = JobQueue()

    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TOKEN).persistence(persistence).job_queue(job_queue).build()

    # ### –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ###
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prefs", prefs_command))
    app.add_handler(CommandHandler("fridge", fridge_command))
    
    app.add_handler(CallbackQueryHandler(inline_button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    # --- –ù–ê–°–¢–†–û–ô–ö–ò –í–ï–ë–•–£–ö–ê ---
    PORT = int(os.environ.get('PORT', 8443))
    RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL')
    if not RENDER_EXTERNAL_URL:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL.")

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏...")
    
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token=TOKEN.split(':')[-1],
        webhook_url=RENDER_EXTERNAL_URL
    )

if __name__ == "__main__":
    main()
